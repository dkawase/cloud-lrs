#
# STEP 1:
# Create the httpd proxy config file to replace the default configuration
#
files:
  '/tmp/cloudlrs.httpd.conf':
    mode: '000755'
    owner: root
    group: root
    content: |
      # Elastic Beanstalk Managed
      #
      # Elastic Beanstalk managed configuration file
      # Some configuration of httpd can be by placing files in /etc/httpd/conf.d/
      # using Configuration Files.
      # http://docs.amazonwebservices.com/elasticbeanstalk/latest/dg/customize-containers.html
      #
      # Modifications of httpd.conf can be performed using container_commands to modify the staged version
      # located in /tmp/deployment/config/etc#httpd#conf#httpd.conf
      # This file was overwritten during deployment
      # by .ebextensions/02_container_commands.config

      Listen 8080
      AddOutputFilterByType DEFLATE text/plain text/html text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript

      ProxyPass /api http://localhost:2000/api retry=0 KeepAlive=On
      ProxyPass /lti  http://localhost:2000/lti retry=0 KeepAlive=On
      ProxyPassReverse /api http://localhost:2000/api
      ProxyPassReverse /lti  http://localhost:2000/lti
      ProxyPreserveHost On

      DocumentRoot '/var/www/html/public'

      # Indicate that we're forwarding a request that came in over HTTPS. This
      # is important for the LTI signature.
      RequestHeader set X-Forwarded-Proto "https"

      RewriteEngine On
          RewriteRule ^/privacydashboard     /var/www/html/public/index.html

      LogFormat "%h (%{X-Forwarded-For}i) %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\"" combined

  # Proxy SSL connections to port 80, to be handled by the Cloud LRS-specific conf above.
  /etc/httpd/conf.d/ssl.conf:
    mode: '000644'
    owner: root
    group: root
    content: |
      LoadModule ssl_module modules/mod_ssl.so
      Listen 443
      <VirtualHost *:443>
        <Proxy *>
          Order deny,allow
          Allow from all
        </Proxy>

        SSLEngine             on
        SSLCertificateFile    "/etc/pki/tls/certs/cloud_lrs_instance.crt"
        SSLCertificateKeyFile "/etc/pki/tls/certs/cloud_lrs_instance.key"
        SSLCipherSuite        EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH
        SSLProtocol           All -SSLv2 -SSLv3
        SSLHonorCipherOrder   On
        SSLSessionTickets     Off

        Header always set Strict-Transport-Security "max-age=63072000; includeSubdomains; preload"
        Header always set X-Frame-Options DENY
        Header always set X-Content-Type-Options nosniff
        Header set Access-Control-Allow-Origin "*"

        ProxyPass / http://localhost:80/ retry=0
        ProxyPassReverse / http://localhost:80/
        ProxyPreserveHost on
        RequestHeader set X-Forwarded-Proto "https" early

      </VirtualHost>

  # The load balancer expects to find this SSL certificate on EC2 instances. Note that this is a self-signed
  # certificate for the load balancer's benefit only, not the domain-associated certificate that the load
  # balancer presents to users.
  /etc/pki/tls/certs/cloud_lrs_instance.crt:
    mode: '000400'
    owner: root
    group: root
    content: |
      -----BEGIN CERTIFICATE-----
      MIIEIjCCAwoCCQCwhQUqTb0YaDANBgkqhkiG9w0BAQUFADCB0jELMAkGA1UEBhMC
      VVMxEzARBgNVBAgTCkNhbGlmb3JuaWExETAPBgNVBAcTCEJlcmtlbGV5MSEwHwYD
      VQQKExhVbml2ZXJzaXR5IG9mIENhbGlmb3JuaWExKDAmBgNVBAsTH0VkdWNhdGlv
      bmFsIFRlY2hub2xvZ3kgU2VydmljZXMxIDAeBgNVBAMTF2V0cy1iZXJrZWxleS1z
      dWl0ZWMubmV0MSwwKgYJKoZIhvcNAQkBFh1hd3Mtc3VpdGVjQGxpc3RzLmJlcmtl
      bGV5LmVkdTAeFw0xNzAxMzAyMTMyNDFaFw0xODAxMzAyMTMyNDFaMIHSMQswCQYD
      VQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTERMA8GA1UEBxMIQmVya2VsZXkx
      ITAfBgNVBAoTGFVuaXZlcnNpdHkgb2YgQ2FsaWZvcm5pYTEoMCYGA1UECxMfRWR1
      Y2F0aW9uYWwgVGVjaG5vbG9neSBTZXJ2aWNlczEgMB4GA1UEAxMXZXRzLWJlcmtl
      bGV5LXN1aXRlYy5uZXQxLDAqBgkqhkiG9w0BCQEWHWF3cy1zdWl0ZWNAbGlzdHMu
      YmVya2VsZXkuZWR1MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmiwl
      d0KYQsyPczI9NYX9+lywQOU4jUFuls/VyN/WV9iwNYnIe3PI2kGcuVjwGNA2c1NK
      WAjFUH4Ylbv0UjbXE2kPTIP7haJ+MzOWIuRP6xMyh6VBbw58y91btmDBts1KxeFt
      uho2SQ/K6W+obZRAAGvwy//ejL5H5KU9MDhFSfhvr1Obo5Dl4KtJ6Q3RyM33PUxl
      vFUUSyJq15vFkTS2081Ezj6grP4rDSwgWPpe3Nx7Qij1tbnWsNUhq34BiKUlTGo+
      3zks+y0CRs2vqFBbBbziHc7T6sXi5hf9FpIw1fDY08a7bdJ96oDKX79UuAWwoK2E
      AFeE8pPnAcpNq/BrrQIDAQABMA0GCSqGSIb3DQEBBQUAA4IBAQAXm7iNjbbmA0hm
      pYmatH7rYyt3x/cMIPk+JqAE5Wl7LX3AWs+VJUEQfmx7eH/OlIuH1DZG0JYELmDw
      yf0os30rNk1zz4+HT6+QdkikqVXWLljK3/F2UcLRQ1QxAUhhQZyjEA0S/QCeA+Um
      qQQ3IN3HNqsQtW2s9lZh3lULtjQPjiaxA0bHE7wpfDqZ7/3pqYVqDbDgSea7KK7a
      dlAHiyP7+LP4U00bQp/m1Hb5ykT/rLMjiVwqFpB+YjCsUsuPYq1UTLNA2zh7mvJP
      BhNKFR9+k+Kpl9YBcbLGoC67OPLjPUIdrBLu660JInFuItCiiq6w4aLBPUDGblgy
      8JH5mCAF
      -----END CERTIFICATE-----

  # Get the private key matching the certificate.
  /etc/pki/tls/certs/cloud_lrs_instance.key:
    mode: '000400'
    owner: root
    group: root
    authentication: "S3Auth"
    source: https://s3-us-west-2.amazonaws.com/elasticbeanstalk-us-west-2-697877139013/cloud-lrs/cloud_lrs.key
